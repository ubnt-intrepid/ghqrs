use clap::{Arg, App, AppSettings, SubCommand};

fn build_cli_base() -> App<'static, 'static> {
  App::new(env!("CARGO_PKG_NAME"))
    .about(env!("CARGO_PKG_DESCRIPTION"))
    .version(env!("CARGO_PKG_VERSION"))
    .author(env!("CARGO_PKG_AUTHORS"))
    .setting(AppSettings::VersionlessSubcommands)
    .setting(AppSettings::SubcommandRequiredElseHelp)
}

pub fn build_cli() -> App<'static, 'static> {
  build_cli_base()
    .subcommand(SubCommand::with_name("get")
      .about("Clone or sync with remote repository")
      .arg(Arg::with_name("project")
        .multiple(true)
        .required(true)
        .help("repository name or URL"))
      .arg(Arg::with_name("skip_pull")
        .long("skip-pull")
        .help("Skip to clone if the repository has already existed"))
      .arg(Arg::with_name("shallow")
        .long("shallow")
        .help("Do shallow clone")))
    .subcommand(SubCommand::with_name("list")
      .about("List locally cloned repositories")
      .arg(Arg::with_name("exact")
        .short("e")
        .long("exact")
        .help("Perform an exact match"))
      .arg(Arg::with_name("fullpath")
        .short("p")
        .long("full-path")
        .help("print full paths"))
      .arg(Arg::with_name("unique")
        .short("u")
        .long("unique")
        .help("Print unique subpaths"))
      .arg(Arg::with_name("query")))
    .subcommand(SubCommand::with_name("root")
      .about("Show repositories's root")
      .arg(Arg::with_name("all")
        .short("a")
        .long("all")
        .help("Show all roots")))
}
